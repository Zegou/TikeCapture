import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';


class TicketsDetailsTransport extends StatefulWidget {
  final String id;
  final String promocode ;

  TicketsDetailsTransport({this.id,  this.promocode}) ;

  @override
  _HomePageState createState() => _HomePageState(CodePromo : this.promocode);
}

class _HomePageState extends State<TicketsDetailsTransport> {

  final String CodePromo ;
  _HomePageState({this.CodePromo});
  /*Show dynamically */
  List<String> data = [
    'SAT 24 MAR', 'SUN 25 MAR', 'MON 26 MARS'
  ];


  /*Caculate all the price*/

  int finalprice = 0 ;
  int _unitprice = 80;
  /*Caculate all the price*/
  int _counterOK = 0;
/*
  String  _counterOKValue ="_counterOK"
*/
  int finalpriceOK = 0 ;
  int _unitpriceOK = 80;

  void _incrementCounter(int valeur) {

    var dataCountervALUE = new List(data.length-1);


    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.

      for (int i=1;i<data.length;i++){



        if(valeur==i){
          // ignore: unnecessary_statements
          dataCountervALUE[valeur]++;
          _counterOK  = dataCountervALUE[valeur];
          exit(0);
        }

      }

    });
  }




  int initPosition = 1;


  bool searching ;
  TextStyle style = TextStyle(fontFamily: 'MontserratBold');
  int id = 0 ;
  Color color = Colors.transparent;
  TextStyle style2 = TextStyle(fontFamily: 'MontserratRegular' , fontSize: 17);
  String _value = '40';

  void _onClick(String value) {
    setState(() => _value = '${value}');
  }
  @override
  void initState() {
    searching = false;
    super.initState();

  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xffEFEFF0),
      appBar: AppBar(
// TODO: Add buttons and title (102)

        leading: IconButton(

          icon:Icon(Icons.arrow_back),
          color: Colors.white,
          onPressed:(){
            setState(() {
              searching = false;
              //set not searching on back button press
            });
          },
        ),


        //if searching is true then show arrow back else play arrow
        title:Text("Ticket Details"),

        backgroundColor: searching?Colors.black:Colors.black,


        //if searching set background to orange, else set to deep orange
      ),
      body: SafeArea(
        child: CustomTabView(
          initPosition: initPosition,
          itemCount: data.length,
          tabBuilder: (context, index) =>
              Tab(text: data[index]),
          pageBuilder: (context, index) => Center(child:
          SingleChildScrollView(

              child: new Material(
                  color: Colors.white,

                  child :Column(
                      children: <Widget>[
                        Padding(

                            padding: const EdgeInsets.all(10.0),
                            child: Column(
                                crossAxisAlignment: CrossAxisAlignment.center,
                                mainAxisAlignment: MainAxisAlignment.center,

                                children: <Widget>[
                                  SizedBox(
                                    height: 10.0,
                                  ),
                                  Container(
                                    color: Colors.white10,
                                    padding: const EdgeInsets.all(10.0),
                                    child:  Row(

                                      children: [
                                        Column(
                                            children: [
                                              Text("WHAT TICKETS DO YOU LIKE?",style: TextStyle(fontFamily: "MontserratSemiBold", fontSize: 18 , color :Colors.black26),)
                                            ]
                                        )
                                      ],
                                    ),
                                  ),
                                  SizedBox(
                                    height: 10.0,
                                  ),
                                  Card(
                                    clipBehavior: Clip.antiAlias,

                                    child: Row(
                                      children: [

                                        Expanded(
                                            flex: 2, // 20%

                                            child: Container(
                                              padding: const EdgeInsets.all(25.0)
                                              ,color: Colors.black12,
                                              child: Text("0", style: TextStyle(fontFamily: "MontserratRegular",fontSize: 50)),
                                            )

                                        ),
                                        Expanded(
                                          flex: 8, // 60%
                                          child: Align(
                                              alignment: Alignment.centerLeft,
                                              child : Container(
                                                padding: EdgeInsets.only(left: 40),
                                                child: Column(
                                                    children: [
                                                      Text("Normal Ticket",style: TextStyle(fontFamily: "MontserratSemiBold", fontSize: 16 , color :Colors.black54), textAlign: TextAlign.left),
                                                      SizedBox(
                                                        height: 5.0,
                                                      ),
                                                      Text("4:30 PM until 6:30PM" ,style: TextStyle(fontFamily: "MontserratRegular", fontSize: 13 , color :Colors.black26), textAlign: TextAlign.left),
                                                      SizedBox(
                                                        height: 5.0,
                                                      ),
                                                      Text("Sold out" ,style: TextStyle(fontFamily: "MontserratRegular", fontSize: 13 , color :Color(0xffba1818)), textAlign: TextAlign.left),

                                                    ]
                                                ),
                                              )
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  SizedBox(
                                    height: 10.0,
                                  ),
                                  Card(
                                    clipBehavior: Clip.antiAlias,

                                    child: Row(
                                      children: [

                                        Expanded(
                                            flex: 2, // 20%

                                            child: Container(
                                              padding: const EdgeInsets.all(25.0)
                                              ,color: Colors.black12,
                                              child: Text("$_counterOK", style: TextStyle(fontFamily: "MontserratRegular",fontSize: 50)),
                                            )

                                        ),
                                        Expanded(
                                          flex: 6, // 60%
                                          child: Align(
                                              alignment: Alignment.centerLeft,
                                              child : Container(
                                                padding: EdgeInsets.only(left: 40),
                                                child: Column(
                                                    children: [
                                                      Text("Vip Ticket",style: TextStyle(fontFamily: "MontserratSemiBold", fontSize: 16 , color :Colors.black54), textAlign: TextAlign.left),
                                                      SizedBox(
                                                        height: 5.0,
                                                      ),
                                                      Text("4:30 PM until 6:30PM" ,style: TextStyle(fontFamily: "MontserratRegular", fontSize: 13 , color :Colors.black26), textAlign: TextAlign.left),
                                                      SizedBox(
                                                        height: 5.0,
                                                      ),
                                                      Text("x 80\$ = $finalpriceOK" ,style: TextStyle(fontFamily: "MontserratRegular", fontSize: 13 , color :Color(0xffba1818)), textAlign: TextAlign.left),

                                                    ]
                                                ),
                                              )
                                          ),
                                        ),
                                        Expanded(
                                            flex: 2, // 20%
                                            child : Column(
                                                children: [
                                                  Row(
                                                      children: [
                                                        Container(
                                                          color: Colors.white10,
                                                          child :new GestureDetector(
                                                            onTap: () => _incrementCounter(index),
                                                            child: new Text("+" ,style: TextStyle(fontFamily: "MontserratBold", fontSize: 30 , color :Color(0xffba1818))    , textAlign:TextAlign.center),
                                                          ), /*Text("+" ,style: TextStyle(fontFamily: "MontserratBold", fontSize: 30 , color :Color(0xffba1818))    , textAlign:TextAlign.center)*/

                                                        )

                                                      ]),
                                                  Row(
                                                      children: [
                                                        Container(
                                                            color: Colors.white10,
                                                            child : Text("-" ,style: TextStyle(fontFamily: "MontserratBold", fontSize: 30 , color :Color(0xffba1818))         , textAlign:TextAlign.center ,
                                                            )

                                                        ),
                                                      ])


                                                ]
                                            )

                                        )
                                      ],
                                    ),
                                  ),
                                ]
                            )
                        )
                      ]
                  )
              )
          ),
            /*Text(data[index], style: TextStyle(fontFamily: "MontserratRegular"),)*/
          ),
          onPositionChange: (index){
            print('current position: $index');
            initPosition = index;
          },
          onScroll: (position) => print('$position'),
        ),
      ),
/*      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            data.add('Page ${data.length}');
          });
        },
        child: Icon(Icons.add),
      ),*/
      bottomNavigationBar: orderDetail(context,this.CodePromo),
    );


  }
  Widget orderDetail(BuildContext context , String promocode) {
    return Container(
      height: 200.0,
      margin: EdgeInsets.only(top: 25.0, bottom: 16.0),
      padding: EdgeInsets.symmetric(horizontal: 20.0),
      child: Column(
        children: <Widget>[
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: <Widget>[
              Text(
                "Card Total",
                style: TextStyle(
                    color: Colors.grey,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold),
              ),
              Text(
                "\u20B9 33.0",
                style: TextStyle(
                    color: Colors.black,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold),
              ),
            ],
          ),


          Container(
              child : Column(
                children: [

                  // On déclare un if en fonction du code Promo
                  if (promocode == "") ...[

                  ] else ...[
                    SizedBox(
                      height: 10.0,
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: <Widget>[
                        Text(
                          "Discount",
                          style: TextStyle(
                              color: Colors.grey,
                              fontSize: 16.0,
                              fontWeight: FontWeight.bold),
                        ),
                        Text(
                          "2.0",
                          style: TextStyle(
                              color: Colors.black,
                              fontSize: 16.0,
                              fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                  ],
                ],
              )

          ),




          /*      SizedBox(
            height: 13.0,
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: <Widget>[
              Text(
                "Tax",
                style: TextStyle(
                    color: Colors.grey,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold),
              ),
              Text(
                "3.0",
                style: TextStyle(
                    color: Colors.black,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold),
              ),
            ],
          ),*/
          Divider(
            height: 40.0,
            color: Color(0xFFD3D3D3),
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: <Widget>[
              Text(
                "Sub Total",
                style: TextStyle(
                    color: Colors.grey,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold),
              ),
              Text(
                "38.0",
                style: TextStyle(
                    color: Colors.black,
                    fontSize: 16.0,
                    fontWeight: FontWeight.bold),
              ),
            ],
          ),

          // ListTile(
          //   leading: Text("Card Total",style: TextStyle(color: Colors.grey,fontSize: 16.0,fontWeight: FontWeight.bold),),
          //   trailing: Text("33.0",style: TextStyle(color: Colors.black,fontSize: 16.0,fontWeight: FontWeight.bold),),
          // ),
          SizedBox(
            height: 24.0,
          ),
          InkWell(
            onTap: ()
            {
/*
              Navigator.of(context).push(MaterialPageRoute(builder: (BuildContext context)=>SignInPage()));
*/
            },
            child: Container(
              height: 50.0,
              width: MediaQuery.of(context).size.width,
              decoration: BoxDecoration(
                color: Colors.black,
                borderRadius: BorderRadius.circular(30.0),
              ),
              child: Center(
                child: Text(
                  "Procede to CheckOut",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18.0,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

}
class _SliverAppBarDelegate extends SliverPersistentHeaderDelegate {
  _SliverAppBarDelegate(this._tabBar);

  final TabBar _tabBar;

  @override
  double get minExtent => _tabBar.preferredSize.height;
  @override
  double get maxExtent => _tabBar.preferredSize.height;

  @override
  Widget build(
      BuildContext context, double shrinkOffset, bool overlapsContent) {

    return Container(
        child: Container(
            color:Colors.white10 ,
            child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  Container(
                    color: Colors.white,        // Tab Bar color change
                    child: _tabBar,
                  )
                ]
            )

        )

    );
  }

  @override
  bool shouldRebuild(_SliverAppBarDelegate oldDelegate) {
    return false;
  }
}

/// Implementation

class CustomTabView extends StatefulWidget {
  final int itemCount;
  final IndexedWidgetBuilder tabBuilder;
  final IndexedWidgetBuilder pageBuilder;
  final Widget stub;
  final ValueChanged<int> onPositionChange;
  final ValueChanged<double> onScroll;
  final int initPosition;

  CustomTabView({
    @required this.itemCount,
    @required this.tabBuilder,
    @required this.pageBuilder,
    this.stub,
    this.onPositionChange,
    this.onScroll,
    this.initPosition,
  });

  @override
  _CustomTabsState createState() => _CustomTabsState();
}

class _CustomTabsState extends State<CustomTabView> with TickerProviderStateMixin {
  TabController controller;
  int _currentCount;
  int _currentPosition;

  @override
  void initState() {
    _currentPosition = widget.initPosition ?? 0;
    controller = TabController(
      length: widget.itemCount,
      vsync: this,
      initialIndex: _currentPosition,
    );
    controller.addListener(onPositionChange);
    controller.animation.addListener(onScroll);
    _currentCount = widget.itemCount;
    super.initState();
  }

  @override
  void didUpdateWidget(CustomTabView oldWidget) {
    if (_currentCount != widget.itemCount) {
      controller.animation.removeListener(onScroll);
      controller.removeListener(onPositionChange);
      controller.dispose();

      if (widget.initPosition != null) {
        _currentPosition = widget.initPosition;
      }

      if (_currentPosition > widget.itemCount - 1) {
        _currentPosition = widget.itemCount - 1;
        _currentPosition = _currentPosition < 0 ? 0 :
        _currentPosition;
        if (widget.onPositionChange is ValueChanged<int>) {
          WidgetsBinding.instance.addPostFrameCallback((_){
            if(mounted) {
              widget.onPositionChange(_currentPosition);
            }
          });
        }
      }

      _currentCount = widget.itemCount;
      setState(() {
        controller = TabController(
          length: widget.itemCount,
          vsync: this,
          initialIndex: _currentPosition,
        );
        controller.addListener(onPositionChange);
        controller.animation.addListener(onScroll);
      });
    } else if (widget.initPosition != null) {
      controller.animateTo(widget.initPosition);
    }

    super.didUpdateWidget(oldWidget);
  }

  @override
  void dispose() {
    controller.animation.removeListener(onScroll);
    controller.removeListener(onPositionChange);
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (widget.itemCount < 1) return widget.stub ?? Container();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: <Widget>[
        Container(
          alignment: Alignment.center,
          child: TabBar(
            isScrollable: true,
            controller: controller,
            labelColor: Theme.of(context).primaryColor,
            unselectedLabelColor: Theme.of(context).hintColor,
            indicator: BoxDecoration(
              border: Border(
                bottom: BorderSide(
                  color: Theme.of(context).primaryColor,
                  width: 2,
                ),
              ),
            ),
            tabs: List.generate(
              widget.itemCount,
                  (index) => widget.tabBuilder(context, index),
            ),
          ),
        ),
        Expanded(
          child: TabBarView(
            controller: controller,
            children: List.generate(
              widget.itemCount,
                  (index) => widget.pageBuilder(context, index),
            ),
          ),
        ),
      ],
    );
  }

  onPositionChange() {
    if (!controller.indexIsChanging) {
      _currentPosition = controller.index;
      if (widget.onPositionChange is ValueChanged<int>) {
        widget.onPositionChange(_currentPosition);
      }
    }
  }

  onScroll() {
    if (widget.onScroll is ValueChanged<double>) {
      widget.onScroll(controller.animation.value);
    }
  }
}